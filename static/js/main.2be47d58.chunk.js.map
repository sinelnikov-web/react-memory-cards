{"version":3,"sources":["components/Game/Grid.style.tsx","components/Game/Card.style.tsx","components/Main/Container.style.tsx","components/Header/Time.style.tsx","components/Header/Header.style.jsx","components/Header/Button.style.tsx","components/Header/Score.style.tsx","components/Header/Header.tsx","components/Game/BestScoreTitle.style.tsx","components/Game/BestTime.tsx","utils/words-generator.ts","components/Game/Game.tsx","components/Main/Main.tsx","App.style.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Grid","styled","div","CenteredGrid","Card","CardBack","CardFront","Container","Time","time","HeaderWrapper","header","HeaderInner","Button","button","Score","Header","score","startGame","minutes","Math","floor","seconds","toString","length","Infinity","onClick","BestScoreTitle","h1","BestTime","bestTime","generateWords","words","newWordsList","unusedIndexes","Array","apply","map","Number","call","word","firstCardId","random","firstRandomIndex","firstCurrentIndex","slice","secondRandomIndex","secondCurrentIndex","secondCardId","cardId","isOpen","twinIndex","isGuess","Game","useState","localStorage","getItem","setBestTime","isWin","setIsWin","gameInProcess","setGameInProcess","timer","setTimer","openedCards","setOpenedCards","setScore","wordsState","setWordsState","useEffect","setTimeout","prev","win","setItem","index","JSON","stringify","className","idx","indexOf","twinIdx","filter","handleCardClick","Main","AppWrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2be47d58.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n\r\nexport const Grid = styled.div`\r\n  padding: 40px;\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 1fr);\r\n  grid-gap: 20px;\r\n  \r\n  @media (max-width: 997px) {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`\r\n\r\nexport const CenteredGrid = styled.div`\r\n  display: grid;\r\n  margin-top: 200px;\r\n  \r\n  h1 {\r\n    align-self: center;\r\n    justify-self: center;\r\n  }\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const Card = styled.div`\r\n  width: 100%;\r\n  height: 150px;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  transition: all 0.3s linear;\r\n  cursor: pointer;\r\n  font-size: 32px;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 15px rgba(255, 255, 255, 0.8);\r\n  }\r\n  \r\n  &.guessed {\r\n    opacity: 0;\r\n  }\r\n  \r\n  @media (max-width: 567px) {\r\n    height: 0;\r\n    padding-top: 100%;\r\n    font-size: 16px;\r\n  }\r\n`\r\n\r\nexport const CardBack = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  background-color: black;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 2;\r\n  backface-visibility: hidden;\r\n  transition: all 0.3s ease;\r\n  \r\n  &.active {\r\n    transform: rotateY(180deg);\r\n  }\r\n  \r\n`\r\n\r\nexport const CardFront = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  color: white;\r\n  background-color: black;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  transform: rotateY(180deg);\r\n  transition: all 0.3s ease;\r\n  &.active {\r\n    transform: rotateY(360deg);\r\n  }\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const Container = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const Time = styled.time`\r\n\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const HeaderWrapper = styled.header`\r\n  font-size: 50px;\r\n  color: white;\r\n\r\n  @media (max-width: 567px) {\r\n    font-size: 25px;\r\n    \r\n    & button {\r\n      font-size: 15px;\r\n      padding: 10px 20px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const HeaderInner = styled.header`\r\n  padding: 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: #567fed;\r\n  color: white;\r\n  font-size: 30px;\r\n  padding: 10px 30px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n`","import styled from \"styled-components\";\r\n\r\n\r\nexport const Score = styled.div`\r\n  color: white;\r\n\r\n  span {\r\n    color: #8a8989;\r\n  }\r\n`","import React from 'react';\r\nimport {Time} from \"./Time.style\";\r\nimport {Container} from \"../Main/Container.style\";\r\nimport {HeaderInner, HeaderWrapper} from \"./Header.style\";\r\nimport {Button} from \"./Button.style\";\r\nimport {Score} from \"./Score.style\";\r\n\r\ninterface HeaderProps {\r\n    score: number\r\n    time: number\r\n    startGame: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({score, time, startGame}) => {\r\n\r\n    let minutes = Math.floor(time / 60)\r\n    let seconds = time - 60 * minutes\r\n\r\n    return (\r\n        <HeaderWrapper>\r\n            <Container>\r\n                <HeaderInner>\r\n                    <Time>{minutes.toString().length == 2 ? minutes : `0${minutes}`}:{seconds.toString().length == 2 ? seconds : `0${seconds}`}</Time>\r\n                    {score !== Infinity ? <Score>{score}/<span>16</span></Score> : ''}\r\n                    <Button onClick={startGame}>Start</Button>\r\n                </HeaderInner>\r\n            </Container>\r\n        </HeaderWrapper>\r\n    );\r\n};\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\n\r\nexport const BestScoreTitle = styled.h1`\r\n  color: white;\r\n`","import React from 'react';\r\nimport {CenteredGrid} from \"./Grid.style\";\r\nimport {BestScoreTitle} from \"./BestScoreTitle.style\";\r\n\r\ninterface BestTimeProps {\r\n    bestTime: number\r\n}\r\n\r\nconst BestTime: React.FC<BestTimeProps> = ({bestTime}) => {\r\n\r\n    let minutes = Math.floor(bestTime / 60)\r\n    let seconds = bestTime - minutes * 60\r\n\r\n    return (\r\n        <CenteredGrid>\r\n            <BestScoreTitle>\r\n                Your best score is {minutes.toString().length === 2 ? minutes : `0${minutes}`}:{seconds.toString().length === 2 ? seconds : `0${seconds}`}\r\n            </BestScoreTitle>\r\n        </CenteredGrid>\r\n    );\r\n};\r\n\r\nexport default BestTime;","export type CardType = {\r\n    cardId: number\r\n    word: string\r\n    isOpen: boolean\r\n    twinIndex: number\r\n    isGuess: boolean\r\n}\r\n\r\nexport function generateWords(words: Array<string>): Array<CardType> {\r\n    const newWordsList: Array<CardType> = []\r\n    let unusedIndexes = Array.apply(null, {length: words.length * 2} as unknown[]).map(Number.call, Number) as number[]\r\n    for (let word of words) {\r\n        let firstCardId = Math.floor(Math.random() * 100000000)\r\n        let firstRandomIndex = Math.floor(Math.random() * unusedIndexes.length)\r\n        let firstCurrentIndex = unusedIndexes[firstRandomIndex]\r\n        unusedIndexes = [...unusedIndexes.slice(0, firstRandomIndex), ...unusedIndexes.slice(firstRandomIndex + 1, unusedIndexes.length)]\r\n        let secondRandomIndex = Math.floor(Math.random() * unusedIndexes.length)\r\n        let secondCurrentIndex = unusedIndexes[secondRandomIndex]\r\n        let secondCardId = Math.floor(Math.random() * 100000000)\r\n        unusedIndexes = [...unusedIndexes.slice(0, secondRandomIndex), ...unusedIndexes.slice(secondRandomIndex + 1, unusedIndexes.length)]\r\n        newWordsList[firstCurrentIndex] = {\r\n            cardId: firstCardId,\r\n            word,\r\n            isOpen: false,\r\n            twinIndex: secondCurrentIndex,\r\n            isGuess: false\r\n        }\r\n        newWordsList[secondCurrentIndex] = {\r\n            cardId: secondCardId,\r\n            word,\r\n            isOpen: false,\r\n            twinIndex: firstCurrentIndex,\r\n            isGuess: false\r\n        }\r\n    }\r\n    return newWordsList\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Grid} from \"./Grid.style\";\r\nimport {Card, CardBack, CardFront} from \"./Card.style\";\r\nimport {Container} from \"../Main/Container.style\";\r\nimport Header from \"../Header/Header\";\r\nimport BestTime from \"./BestTime\";\r\nimport {CardType, generateWords} from \"../../utils/words-generator\";\r\n\r\nconst Game = () => {\r\n    const words = ['Cow', 'Snake', 'Lion', 'Horse', 'Fox', 'Fish', 'Cat', 'Dog']\r\n    const [bestTime, setBestTime] = useState(() => {\r\n        return +(localStorage.getItem('bestTime') || Infinity)\r\n    })\r\n    const [isWin, setIsWin] = useState(false)\r\n    const [gameInProcess, setGameInProcess] = useState(false)\r\n    const [timer, setTimer] = useState(0)\r\n    const [openedCards, setOpenedCards] = useState<number[]>([])\r\n    const [score, setScore] = useState(0)\r\n    const [wordsState, setWordsState] = useState<CardType[]>(() => generateWords(words))\r\n\r\n    useEffect(() => {\r\n        if (gameInProcess && score !== words.length * 2) {\r\n            setTimeout(() => setTimer(prev => prev + 1), 1000)\r\n        } else if (isWin && timer !== 0) {\r\n            setTimer(0)\r\n        }\r\n    }, [timer, gameInProcess, isWin])\r\n\r\n    useEffect(() => {\r\n       if (score === words.length * 2) {\r\n            win()\r\n       }\r\n    }, [score])\r\n\r\n    const win = () => {\r\n        if (timer < bestTime) {\r\n            localStorage.setItem('bestTime', timer.toString())\r\n            setBestTime(timer)\r\n        }\r\n        setIsWin(true)\r\n        setScore(0)\r\n        setGameInProcess(false)\r\n        setTimer(0)\r\n        setWordsState(generateWords(words))\r\n    }\r\n\r\n    const startGame = () => {\r\n        setGameInProcess(true)\r\n    }\r\n\r\n    const handleCardClick = (idx: number) => {\r\n        if (openedCards.length < 2 && gameInProcess && openedCards.indexOf(idx) === -1) {\r\n            setOpenedCards(prev => [...prev, idx])\r\n            if (!wordsState[wordsState[idx].twinIndex].isOpen) {\r\n                setWordsState(prev => prev.map((word, index) => index === idx ? {...word, isOpen: true} : word))\r\n                setTimeout(() => {\r\n                    setWordsState(prev => prev.map((word, index) => index === idx ? {...word, isOpen: false} : word))\r\n                    setOpenedCards(prev => prev.filter(cardId => cardId !== idx))\r\n                }, 2000)\r\n            } else {\r\n                const twinIdx = wordsState[idx].twinIndex\r\n                setWordsState(prev => prev.map((word, index) => index === idx || index === twinIdx ? {\r\n                    ...word,\r\n                    isOpen: true,\r\n                    isGuess: true\r\n                } : word))\r\n                setScore(prev => prev + 2)\r\n                setOpenedCards([])\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header score={score} time={timer} startGame={startGame}/>\r\n            {gameInProcess ?\r\n                <Container>\r\n                    <Grid>\r\n                        {wordsState.map((word, index) => {\r\n                            return (\r\n                                <Card data-word={JSON.stringify(word)} className={word.isGuess ? 'guessed' : ''}\r\n                                      onClick={() => handleCardClick(index)}\r\n                                      key={word.cardId}>\r\n                                    <CardBack className={word.isOpen ? 'active' : ''}/>\r\n                                    <CardFront className={word.isOpen ? 'active' : ''}>\r\n                                        <span>{word.word}</span>\r\n                                    </CardFront>\r\n                                </Card>\r\n                            )\r\n                        })}\r\n                    </Grid>\r\n                </Container>\r\n                :\r\n                <BestTime bestTime={bestTime}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\nimport {Container} from \"./Container.style\";\r\nimport Game from \"../Game/Game\";\r\nimport Header from \"../Header/Header\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <main>\r\n            <Game/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\n\r\nexport const AppWrapper = styled.div`\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  background-color: #282c34;;\r\n`","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\nimport {AppWrapper} from \"./App.style\";\n\n\nfunction App() {\n    return (\n        <AppWrapper>\n            <Main/>\n        </AppWrapper>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}